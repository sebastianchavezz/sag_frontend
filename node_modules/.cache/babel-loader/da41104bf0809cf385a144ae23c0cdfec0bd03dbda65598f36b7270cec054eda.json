{"ast":null,"code":"import _regeneratorRuntime from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport axios from 'axios';\nimport { getCurrentUserId, userIsLoggedIn } from '@/auth/auth';\nimport AppHeader from '../components/header';\nimport LeftCanvas from '../components/left-canvas';\nimport RightCanvas from '../components/right-canvas';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'CreateParty',\n  props: {},\n  components: {\n    AppHeader: AppHeader,\n    LeftCanvas: LeftCanvas,\n    RightCanvas: RightCanvas\n  },\n  computed: _objectSpread({}, mapState(['userId', 'accessToken', 'name'])),\n  data: function data() {\n    return {\n      partyName: \"\",\n      occasion: \"\",\n      date: null,\n      inputType: 'email',\n      // Default input type\n      members: [{\n        identifier: \"\",\n        type: 'email'\n      }],\n      // Default member type\n      profileImageData: null\n    };\n  },\n  methods: {\n    openFileInput: function openFileInput() {\n      this.$refs.fileInput.click(); // Trigger the file input click event\n    },\n    handleFileChange: function handleFileChange(event) {\n      var _this = this;\n      var file = event.target.files[0]; // Get the selected file\n      if (!file) return; // No file selected\n      var reader = new FileReader();\n      reader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Convert the selected file to a Blob object\n              _this.profileImageData = new Blob([file], {\n                type: \"image/jpeg\"\n              });\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      // Set the profileImageData property to the Blob object\n      reader.readAsArrayBuffer(file);\n    },\n    submitForm: function submitForm() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var formData, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              if (_this2.accessToken) {\n                _context2.next = 4;\n                break;\n              }\n              _this2.$router.push('/login');\n              return _context2.abrupt(\"return\");\n            case 4:\n              // Create form data\n              formData = new FormData();\n              formData.append('userId', _this2.userId);\n              formData.append('occasion', _this2.occasion);\n              formData.append('date', _this2.date);\n              formData.append('image', _this2.profileImageData); // Append the Blob\n\n              // Append member data\n              _this2.members.forEach(function (member, index) {\n                formData.append(\"members[\".concat(index, \"][type]\"), member.type);\n                formData.append(\"members[\".concat(index, \"][identifier]\"), member.identifier);\n              });\n\n              // Send the form data to the backend\n              _context2.next = 12;\n              return axios.post('http://localhost:3001/add-party', formData, {\n                headers: {\n                  Authorization: \"Bearer \".concat(_this2.accessToken),\n                  'Content-Type': 'multipart/form-data' // Set content type as multipart/form-data\n                }\n              });\n            case 12:\n              response = _context2.sent;\n              console.log('Party added successfully:', response.data);\n              //this.$emit('party-added', response.data);\n              _context2.next = 19;\n              break;\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Error adding party:', _context2.t0.message);\n              // Handle error\n            case 19:\n              // Clear the form fields after submission\n              _this2.partyName = \"\";\n              _this2.occasion = \"\";\n              _this2.date = null;\n              _this2.members = [{\n                identifier: \"\",\n                type: _this2.inputType\n              }];\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 16]]);\n      }))();\n    },\n    addMember: function addMember() {\n      this.members.push({\n        identifier: \"\",\n        type: this.inputType\n      });\n    },\n    removeMember: function removeMember(index) {\n      this.members.splice(index, 1);\n    }\n  }\n};","map":{"version":3,"names":["axios","getCurrentUserId","userIsLoggedIn","AppHeader","LeftCanvas","RightCanvas","mapState","name","props","components","computed","_objectSpread","data","partyName","occasion","date","inputType","members","identifier","type","profileImageData","methods","openFileInput","$refs","fileInput","click","handleFileChange","event","_this","file","target","files","reader","FileReader","onload","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","Blob","stop","readAsArrayBuffer","submitForm","_this2","_callee2","formData","response","_callee2$","_context2","accessToken","$router","push","abrupt","FormData","append","userId","forEach","member","index","concat","post","headers","Authorization","sent","console","log","t0","error","message","addMember","removeMember","splice"],"sources":["src/views/create-party.vue"],"sourcesContent":["<template>\n  <div class=\"create-party-container\">\n    <app-header rootClassName=\"header-root-class-name3\"></app-header>\n    <div class=\"create-party-main-canvas\">\n      <left-canvas rootClassName=\"left-canvas-root-class-name4\"></left-canvas>\n      <right-canvas rootClassName=\"right-canvas-root-class-name4\"></right-canvas>\n      <div class=\"create-party-container1\">\n        <div class=\"create-party-container2\"><h1>Create a Party</h1></div>\n        <form class=\"create-party-form\" @submit.prevent=\"submitForm\">\n          <input type=\"text\" v-model=\"partyName\" placeholder=\"Name Party\" class=\"create-party-textinput input\" />\n          <input type=\"text\" v-model=\"occasion\" placeholder=\"occasion\" class=\"create-party-textinput1 input\" />\n          <input type=\"date\" v-model=\"date\" placeholder=\"date\" class=\"create-party-textinput2 input\" />\n          <textarea placeholder=\"Description\" class=\"create-party-textarea textarea\"></textarea>\n          <div v-for=\"(member, index) in members\" :key=\"index\">\n            <input type=\"text\" v-model=\"member.identifier\" :placeholder=\"member.type === 'email' ? 'Friend\\'s Email' : 'Friend\\'s Username'\" class=\"create-party-textinput input\" />\n            <button type=\"button\" @click=\"removeMember(index)\" class=\"button\">Remove</button>\n          </div>\n          <select v-model=\"inputType\" class=\"input-type-select\">\n            <option value=\"email\">Email</option>\n            <option value=\"username\">Username</option>\n          </select>\n          <button type=\"button\" @click=\"addMember\" class=\"button\">Add Friend</button>\n          <button type=\"submit\" class=\"button\">Plan a Party</button>\n        </form>\n        <img\n            alt=\"image\"\n            :src=\"profileImageData\"\n            class=\"create-party-image\"\n        />\n        <input type=\"file\" ref=\"fileInput\" @change=\"handleFileChange\" accept=\"image/*\" style=\"display: none\" />\n          <button type=\"button\" class=\"button\" @click=\"openFileInput\">Change Pic</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getCurrentUserId, userIsLoggedIn } from '@/auth/auth';\nimport AppHeader from '../components/header'\nimport LeftCanvas from '../components/left-canvas'\nimport RightCanvas from '../components/right-canvas'\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'CreateParty',\n  props: {},\n  components: {\n    AppHeader,\n    LeftCanvas,\n    RightCanvas,\n  },\n  computed: {\n    ...mapState(['userId', 'accessToken', 'name']),\n  },\n  data() {\n    return {\n      partyName: \"\",\n      occasion: \"\",\n      date: null,\n      inputType: 'email', // Default input type\n      members: [{ identifier: \"\", type: 'email' }], // Default member type\n      profileImageData : null\n    };\n  },\n  methods: {\n    openFileInput() {\n      this.$refs.fileInput.click(); // Trigger the file input click event\n    },\n    handleFileChange(event) {\n      const file = event.target.files[0]; // Get the selected file\n      if (!file) return; // No file selected\n      const reader = new FileReader();\n      reader.onload = async () => {\n      // Convert the selected file to a Blob object\n        this.profileImageData= new Blob([file], { type: \"image/jpeg\" });\n        \n      };\n      // Set the profileImageData property to the Blob object\n      reader.readAsArrayBuffer(file);\n    },\n    async submitForm() { \n      try {\n        if (!this.accessToken) {\n          this.$router.push('/login');\n          return;\n        }\n\n        // Create form data\n        const formData = new FormData();\n        formData.append('userId', this.userId);\n        formData.append('occasion', this.occasion);\n        formData.append('date', this.date);\n        formData.append('image', this.profileImageData); // Append the Blob\n\n        // Append member data\n        this.members.forEach((member, index) => {\n          formData.append(`members[${index}][type]`, member.type);\n          formData.append(`members[${index}][identifier]`, member.identifier);\n        });\n\n        // Send the form data to the backend\n        const response = await axios.post('http://localhost:3001/add-party', formData, {\n          headers: {\n            Authorization: `Bearer ${this.accessToken}`,\n            'Content-Type': 'multipart/form-data', // Set content type as multipart/form-data\n          },\n        });\n\n        console.log('Party added successfully:', response.data);\n        //this.$emit('party-added', response.data);\n      } catch (error) {\n        console.error('Error adding party:', error.message);\n        // Handle error\n      }\n\n      // Clear the form fields after submission\n      this.partyName = \"\";\n      this.occasion = \"\";\n      this.date = null;\n      this.members = [{ identifier: \"\", type: this.inputType }];\n    },\n    addMember() {\n      this.members.push({ identifier: \"\", type: this.inputType });\n    },\n    removeMember(index) {\n      this.members.splice(index, 1);\n    },\n\n  },\n};\n</script>\n\n<style scoped>\n.create-party-container {\n  width: 100%;\n  display: flex;\n  overflow: auto;\n  min-height: 100vh;\n  align-items: center;\n  flex-direction: column;\n}\n.create-party-main-canvas {\n  flex: 1;\n  width: 1600px;\n  height: 100%;\n  display: flex;\n  position: relative;\n  align-items: flex-end;\n  justify-content: center;\n}\n.create-party-container1 {\n  top: 0px;\n  flex: 1;\n  left: 0px;\n  right: 0px;\n  width: 58%;\n  height: 100%;\n  margin: auto;\n  display: flex;\n  position: absolute;\n  align-self: flex-start;\n  align-items: center;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.create-party-container2 {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 98px;\n  display: flex;\n  position: absolute;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n}\n.create-party-form {\n  left: 0px;\n  right: 0px;\n  width: 98%;\n  bottom: 56px;\n  height: 378px;\n  margin: var(--dl-space-space-halfunit);\n  display: flex;\n  position: absolute;\n  align-items: center;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.create-party-textinput {\n  width: 80%;\n}\n.create-party-textinput1 {\n  width: 80%;\n}\n.create-party-textinput2 {\n  width: 80%;\n}\n.create-party-textarea {\n  width: 80%;\n}\n.create-party-image {\n  top: 102px;\n  left: 0px;\n  right: 0px;\n  width: 80%;\n  height: 352px;\n  margin: auto;\n  position: absolute;\n  object-fit: cover;\n}\n@media(max-width: 1600px) {\n  .create-party-main-canvas {\n    width: 100%;\n  }\n  .create-party-container1 {\n    align-items: center;\n    flex-direction: column;\n    justify-content: flex-start;\n  }\n  .create-party-image {\n    width: 684px;\n    height: 355px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}