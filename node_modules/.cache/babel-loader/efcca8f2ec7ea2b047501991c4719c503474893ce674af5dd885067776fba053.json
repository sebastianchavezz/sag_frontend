{"ast":null,"code":"import _regeneratorRuntime from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport axios from 'axios';\nimport { getCurrentUserId, userIsLoggedIn } from '@/auth/auth';\nimport AppHeader from '../components/header';\nimport LeftCanvas from '../components/left-canvas';\nimport RightCanvas from '../components/right-canvas';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'CreateParty',\n  props: {},\n  components: {\n    AppHeader: AppHeader,\n    LeftCanvas: LeftCanvas,\n    RightCanvas: RightCanvas\n  },\n  computed: _objectSpread({}, mapState(['userId', 'accessToken', 'name'])),\n  data: function data() {\n    return {\n      partyName: \"\",\n      occasion: \"\",\n      date: null,\n      description: \"\",\n      inputType: 'email',\n      // Default input type\n      members: [{\n        identifier: \"\",\n        type: 'email'\n      }],\n      // Default member type\n      profileImageData: '',\n      friends: []\n    };\n  },\n  methods: {\n    fetchFriends: function fetchFriends() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get(\"http://localhost:3001/all-friends/\".concat(_this.userId), {\n                headers: {\n                  Authorization: \"Bearer \".concat(_this.accessToken)\n                }\n              });\n            case 3:\n              response = _context.sent;\n              _this.friends = response.data; // Store the user's friends\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching friends:', _context.t0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    },\n    openFileInput: function openFileInput() {\n      this.$refs.fileInput.click(); // Trigger the file input click event\n    },\n    handleFileChange: function handleFileChange(event) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var file, reader;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              file = event.target.files[0]; // Get the selected file\n              if (file) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 3:\n              // No file selected\n              reader = new FileReader();\n              reader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      // Convert the selected file to a Blob object\n                      _this2.profileImageData = new Blob([file], {\n                        type: \"image/jpeg\"\n                      });\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2);\n              }));\n              // Set the profileImageData property to the Blob object\n              reader.readAsArrayBuffer(file);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    submitForm: function submitForm() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var formData, response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              if (_this3.accessToken) {\n                _context4.next = 4;\n                break;\n              }\n              _this3.$router.push('/login');\n              return _context4.abrupt(\"return\");\n            case 4:\n              // Create form data\n              formData = new FormData();\n              formData.append('userId', _this3.userId);\n              formData.append('name', _this3.partyName);\n              formData.append('occasion', _this3.occasion);\n              formData.append('date', _this3.date);\n              formData.append('description', _this3.description);\n              formData.append('image', _this3.profileImageData); // Append the Blob\n\n              // Append member data\n              _this3.members.forEach(function (member, index) {\n                formData.append(\"members[\".concat(index, \"][type]\"), member.type);\n                formData.append(\"members[\".concat(index, \"][identifier]\"), member.identifier);\n              });\n\n              // Send the form data to the backend\n              _context4.next = 14;\n              return axios.post('http://localhost:3001/add-party', formData, {\n                headers: {\n                  Authorization: \"Bearer \".concat(_this3.accessToken),\n                  'Content-Type': 'multipart/form-data' // Set content type as multipart/form-data\n                }\n              });\n            case 14:\n              response = _context4.sent;\n              console.log('Party added successfully:', response.data);\n              //this.$emit('party-added', response.data);\n              _context4.next = 21;\n              break;\n            case 18:\n              _context4.prev = 18;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('Error adding party:', _context4.t0.message);\n              // Handle error\n            case 21:\n              // Clear the form fields after submission\n              _this3.partyName = \"\";\n              _this3.occasion = \"\";\n              _this3.partyName = \"\";\n              _this3.date = null;\n              _this3.members = [{\n                identifier: \"\",\n                type: _this3.inputType\n              }];\n            case 26:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 18]]);\n      }))();\n    },\n    addMember: function addMember() {\n      this.members.push({\n        identifier: \"\",\n        type: this.inputType\n      });\n    },\n    removeMember: function removeMember(index) {\n      this.members.splice(index, 1);\n    }\n  }\n};","map":{"version":3,"names":["axios","getCurrentUserId","userIsLoggedIn","AppHeader","LeftCanvas","RightCanvas","mapState","name","props","components","computed","_objectSpread","data","partyName","occasion","date","description","inputType","members","identifier","type","profileImageData","friends","methods","fetchFriends","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","concat","userId","headers","Authorization","accessToken","sent","t0","console","error","stop","openFileInput","$refs","fileInput","click","handleFileChange","event","_this2","_callee3","file","reader","_callee3$","_context3","target","files","abrupt","FileReader","onload","_callee2","_callee2$","_context2","Blob","readAsArrayBuffer","submitForm","_this3","_callee4","formData","_callee4$","_context4","$router","push","FormData","append","forEach","member","index","post","log","message","addMember","removeMember","splice"],"sources":["src/views/create-party.vue"],"sourcesContent":["<template>\n  <div class=\"create-party-container\">\n    <app-header rootClassName=\"header-root-class-name3\"></app-header>\n    <div class=\"create-party-main-canvas\">\n      <left-canvas rootClassName=\"left-canvas-root-class-name4\"></left-canvas>\n      <right-canvas rootClassName=\"right-canvas-root-class-name4\"></right-canvas>\n      <div class=\"create-party-container1\">\n        <div class=\"create-party-container2\"><h1>Create a Party</h1></div>\n        <form class=\"create-party-form\" @submit.prevent=\"submitForm\">\n          <input type=\"text\" v-model=\"partyName\" placeholder=\"Name Party\" class=\"create-party-textinput input\" />\n          <input type=\"text\" v-model=\"occasion\" placeholder=\"occasion\" class=\"create-party-textinput1 input\" />\n          <input type=\"date\" v-model=\"date\" placeholder=\"date\" class=\"create-party-textinput2 input\" />\n          <input type=\"text\" v-model=\"description\" placeholder=\"description\" class=\"create-party-textinput2 input\" />\n          <div v-for=\"(member, index) in members\" :key=\"index\">\n            <input type=\"text\" v-model=\"member.identifier\" :placeholder=\"member.type === 'email' ? 'Friend\\'s Email' : 'Friend\\'s Username'\" class=\"create-party-textinput input\" />\n            <button type=\"button\" @click=\"removeMember(index)\" class=\"button\">Remove</button>\n          </div>\n          <div>\n         <input type=\"file\" ref=\"fileInput\" @change=\"handleFileChange\" accept=\"image/*\" />\n          <button type=\"button\" @click=\"openFileInput\">Select Image</button>\n        </div>\n          <select v-model=\"inputType\" class=\"input-type-select\">\n            <option value=\"email\">Email</option>\n            <option value=\"username\">Username</option>\n          </select>\n          <button type=\"button\" @click=\"addMember\" class=\"button\">Add Friend</button>\n          <button type=\"submit\" class=\"button\">Plan a Party</button>\n        </form>\n        <div>\n        <img\n            alt=\"image\"\n            :src=\"profileImageData\"\n            class=\"create-party-image\"\n        />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getCurrentUserId, userIsLoggedIn } from '@/auth/auth';\nimport AppHeader from '../components/header'\nimport LeftCanvas from '../components/left-canvas'\nimport RightCanvas from '../components/right-canvas'\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'CreateParty',\n  props: {},\n  components: {\n    AppHeader,\n    LeftCanvas,\n    RightCanvas,\n  },\n  computed: {\n    ...mapState(['userId', 'accessToken', 'name']),\n  },\n  data() {\n    return {\n      partyName: \"\",\n      occasion: \"\",\n      date: null,\n      description: \"\",\n      inputType: 'email', // Default input type\n      members: [{ identifier: \"\", type: 'email' }], // Default member type\n      profileImageData : '',\n      friends: []\n    };\n  },\n  methods: {\n    async fetchFriends() {\n      try {\n        const response = await axios.get(`http://localhost:3001/all-friends/${this.userId}`, {\n          headers: {\n            Authorization: `Bearer ${this.accessToken}`,\n          },\n        });\n        this.friends = response.data; // Store the user's friends\n      } catch (error) {\n        console.error('Error fetching friends:', error);\n      }\n    },\n    openFileInput() {\n      this.$refs.fileInput.click(); // Trigger the file input click event\n    },\n    async handleFileChange(event) {\n      const file = event.target.files[0]; // Get the selected file\n      if (!file) return; // No file selected\n      const reader = new FileReader();\n      reader.onload = async () => {\n      // Convert the selected file to a Blob object\n        this.profileImageData= new Blob([file], { type: \"image/jpeg\" });\n        \n      };\n      // Set the profileImageData property to the Blob object\n      reader.readAsArrayBuffer(file);\n    },\n    async submitForm() { \n      try {\n        if (!this.accessToken) {\n          this.$router.push('/login');\n          return;\n        }\n\n        // Create form data\n        const formData = new FormData();\n        formData.append('userId', this.userId);\n        formData.append('name', this.partyName);\n        formData.append('occasion', this.occasion);\n        formData.append('date', this.date);\n        formData.append('description', this.description);\n        formData.append('image', this.profileImageData); // Append the Blob\n\n        // Append member data\n        this.members.forEach((member, index) => {\n          formData.append(`members[${index}][type]`, member.type);\n          formData.append(`members[${index}][identifier]`, member.identifier);\n        });\n\n        // Send the form data to the backend\n        const response = await axios.post('http://localhost:3001/add-party', formData, {\n          headers: {\n            Authorization: `Bearer ${this.accessToken}`,\n            'Content-Type': 'multipart/form-data', // Set content type as multipart/form-data\n          },\n        });\n\n        console.log('Party added successfully:', response.data);\n        //this.$emit('party-added', response.data);\n      } catch (error) {\n        console.error('Error adding party:', error.message);\n        // Handle error\n      }\n\n      // Clear the form fields after submission\n      this.partyName = \"\";\n      this.occasion = \"\";\n      this.partyName = \"\";\n      this.date = null;\n      this.members = [{ identifier: \"\", type: this.inputType }];\n    },\n    addMember() {\n      this.members.push({ identifier: \"\", type: this.inputType });\n    },\n    removeMember(index) {\n      this.members.splice(index, 1);\n    },\n\n  },\n};\n</script>\n\n<style scoped>\n.create-party-container {\n  width: 100%;\n  display: flex;\n  overflow: auto;\n  min-height: 100vh;\n  align-items: center;\n  flex-direction: column;\n}\n.create-party-main-canvas {\n  flex: 1;\n  width: 1600px;\n  height: 100%;\n  display: flex;\n  position: relative;\n  align-items: flex-end;\n  justify-content: center;\n}\n.create-party-container1 {\n  top: 0px;\n  flex: 1;\n  left: 0px;\n  right: 0px;\n  width: 58%;\n  height: 100%;\n  margin: auto;\n  display: flex;\n  position: absolute;\n  align-self: flex-start;\n  align-items: center;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.create-party-container2 {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 98px;\n  display: flex;\n  position: absolute;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n}\n.create-party-form {\n  left: 0px;\n  right: 0px;\n  width: 98%;\n  bottom: 56px;\n  height: 378px;\n  margin: var(--dl-space-space-halfunit);\n  display: flex;\n  position: absolute;\n  align-items: center;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.create-party-textinput {\n  width: 80%;\n}\n.create-party-textinput1 {\n  width: 80%;\n}\n.create-party-textinput2 {\n  width: 80%;\n}\n.create-party-textarea {\n  width: 80%;\n}\n.create-party-image {\n  top: 102px;\n  left: 0px;\n  right: 0px;\n  width: 80%;\n  height: 352px;\n  margin: auto;\n  position: absolute;\n  object-fit: cover;\n}\n@media(max-width: 1600px) {\n  .create-party-main-canvas {\n    width: 100%;\n  }\n  .create-party-container1 {\n    align-items: center;\n    flex-direction: column;\n    justify-content: flex-start;\n  }\n  .create-party-image {\n    width: 684px;\n    height: 355px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}