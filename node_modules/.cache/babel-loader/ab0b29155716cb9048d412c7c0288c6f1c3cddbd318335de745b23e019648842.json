{"ast":null,"code":"import _regeneratorRuntime from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/sebastian/Desktop/git_sag_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport AppHeader from '../components/header';\nimport ProductCard1 from '../components/product-card1';\nimport LeftCanvas from '../components/left-canvas';\nimport RightCanvas from '../components/right-canvas';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'Profile',\n  props: {},\n  components: {\n    AppHeader: AppHeader,\n    ProductCard1: ProductCard1,\n    LeftCanvas: LeftCanvas,\n    RightCanvas: RightCanvas\n  },\n  created: function created() {\n    // Fetch the profile image of the user when the component is created\n    this.fetchProfileImage();\n  },\n  computed: _objectSpread({}, mapState(['userId', 'accessToken', 'name', 'lastname'])),\n  methods: {\n    fetchProfileImage: function fetchProfileImage() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, blob;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get(\"http://localhost:3001/profile-image/\".concat(_this.userId), {\n                headers: {\n                  Authorization: \"Bearer \".concat(_this.accessToken) // Include access token if required\n                },\n                responseType: 'arraybuffer' // Specify responseType as 'arraybuffer' to receive binary data\n              });\n            case 3:\n              response = _context.sent;\n              // Create a blob from the binary data\n              blob = new Blob([response.data], {\n                type: 'image/jpeg'\n              }); // Adjust type accordingly\n              // Create an object URL from the blob\n              _this.profileImageData = URL.createObjectURL(blob);\n              _context.next = 11;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching profile image:', _context.t0);\n              // Handle error\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 8]]);\n      }))();\n    },\n    openFileInput: function openFileInput() {\n      this.$refs.fileInput.click(); // Trigger the file input click event\n    },\n    handleFileChange: function handleFileChange(event) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var file, reader;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              file = event.target.files[0]; // Get the selected file\n              if (file) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 3:\n              // No file selected\n              // Convert the selected file to binary data (ArrayBuffer)\n              reader = new FileReader();\n              reader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                var binaryData;\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      binaryData = reader.result; // Binary data (ArrayBuffer)\n                      // Send the binary data to the backend\n                      _context2.prev = 1;\n                      _context2.next = 4;\n                      return _this2.sendImageToBackend(binaryData);\n                    case 4:\n                      console.log('Image uploaded successfully');\n                      // Optionally, update the profile image on the frontend\n                      _context2.next = 10;\n                      break;\n                    case 7:\n                      _context2.prev = 7;\n                      _context2.t0 = _context2[\"catch\"](1);\n                      console.error('Error uploading image:', _context2.t0);\n                      // Handle error\n                    case 10:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2, null, [[1, 7]]);\n              }));\n              reader.readAsArrayBuffer(file);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    sendImageToBackend: function sendImageToBackend(binaryData) {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var formData, response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // Send a POST request to your backend endpoint with the binary data\n              formData = new FormData();\n              formData.append('image', new Blob([binaryData])); // Wrap binary data in Blob\n              _context4.next = 4;\n              return axios.post(\"http://localhost:3001/upload-image/\".concat(_this3.userId), formData, {\n                headers: {\n                  'Content-Type': 'multipart/form-data',\n                  // Set content type as multipart/form-data\n                  Authorization: \"Bearer \".concat(_this3.accessToken) // Include access token if required\n                }\n              });\n            case 4:\n              response = _context4.sent;\n              return _context4.abrupt(\"return\", response.data);\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["AppHeader","ProductCard1","LeftCanvas","RightCanvas","mapState","name","props","components","created","fetchProfileImage","computed","_objectSpread","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","blob","wrap","_callee$","_context","prev","next","axios","get","concat","userId","headers","Authorization","accessToken","responseType","sent","Blob","data","type","profileImageData","URL","createObjectURL","t0","console","error","stop","openFileInput","$refs","fileInput","click","handleFileChange","event","_this2","_callee3","file","reader","_callee3$","_context3","target","files","abrupt","FileReader","onload","_callee2","binaryData","_callee2$","_context2","result","sendImageToBackend","log","readAsArrayBuffer","_this3","_callee4","formData","_callee4$","_context4","FormData","append","post"],"sources":["src/views/profile.vue"],"sourcesContent":["<template>\n  <div class=\"profile-container\">\n    <app-header rootClassName=\"header-root-class-name9\"></app-header>\n    <div class=\"profile-main-div\">\n      <div class=\"profile-profile\">\n        <div class=\"profile-container1\">\n          <h1 class=\"profile-text\">{{ this.name }} Profile</h1>\n        </div>\n        <div class=\"profile-container2\">\n          <button type=\"button\" class=\"button\">Add Friend</button>\n          <button type=\"button\" class=\"button\">Message</button>\n          <button type=\"button\" class=\"button\">Add To Party</button>\n        </div>\n        <div class=\"profile-product-placement\">\n          <img\n            alt=\"image\"\n            :src=\"profileImageData\"\n            class=\"profile-image\"\n          />\n        </div>\n        <div class=\"profile-container3\">\n          <input type=\"file\" ref=\"fileInput\" @change=\"handleFileChange\" accept=\"image/*\" style=\"display: none\" />\n          <button type=\"button\" class=\"button\" @click=\"openFileInput\">Change Pic</button>\n        </div>\n        <div class=\"profile-container4\">\n          <h1 class=\"profile-text1\">\n            <span>Whislist</span>\n            <br />\n          </h1>\n        </div>\n        <div class=\"profile-row1\">\n          <product-card1\n            rootClassName=\"product-card1-root-class-name16\"\n          ></product-card1>\n          <product-card1\n            rootClassName=\"product-card1-root-class-name17\"\n          ></product-card1>\n          <product-card1\n            rootClassName=\"product-card1-root-class-name18\"\n          ></product-card1>\n        </div>\n      </div>\n      <left-canvas rootClassName=\"left-canvas-root-class-name10\"></left-canvas>\n      <right-canvas rootClassName=\"right-canvas-root-class-name10\"></right-canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport AppHeader from '../components/header'\nimport ProductCard1 from '../components/product-card1'\nimport LeftCanvas from '../components/left-canvas'\nimport RightCanvas from '../components/right-canvas'\nimport {mapState} from 'vuex'\n\nexport default {\n  name: 'Profile',\n  props: {},\n  components: {\n    AppHeader,\n    ProductCard1,\n    LeftCanvas,\n    RightCanvas,\n  },\n  created() {\n    // Fetch the profile image of the user when the component is created\n    this.fetchProfileImage();\n  },\n  computed:{\n    ...mapState(['userId','accessToken','name', 'lastname']),\n  },\n  methods: {\n    async fetchProfileImage() {\n      try {\n        // Make an API call to fetch the profile image binary data from the backend\n        const response = await axios.get(`http://localhost:3001/profile-image/${this.userId}`, {\n          headers: {\n            Authorization: `Bearer ${this.accessToken}` // Include access token if required\n          },\n          responseType: 'arraybuffer' // Specify responseType as 'arraybuffer' to receive binary data\n        });\n        // Create a blob from the binary data\n        const blob = new Blob([response.data], { type: 'image/jpeg' }); // Adjust type accordingly\n        // Create an object URL from the blob\n        this.profileImageData = URL.createObjectURL(blob);\n      } catch (error) {\n        console.error('Error fetching profile image:', error);\n        // Handle error\n      }\n    },\n    \n    openFileInput() {\n      this.$refs.fileInput.click(); // Trigger the file input click event\n    },\n    async handleFileChange(event) {\n      const file = event.target.files[0]; // Get the selected file\n      if (!file) return; // No file selected\n\n      // Convert the selected file to binary data (ArrayBuffer)\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const binaryData = reader.result; // Binary data (ArrayBuffer)\n        \n        // Send the binary data to the backend\n        try {\n          await this.sendImageToBackend(binaryData);\n          console.log('Image uploaded successfully');\n          // Optionally, update the profile image on the frontend\n        } catch (error) {\n          console.error('Error uploading image:', error);\n          // Handle error\n        }\n      };\n      reader.readAsArrayBuffer(file);\n    },\n    async sendImageToBackend(binaryData) {\n      // Send a POST request to your backend endpoint with the binary data\n      const formData = new FormData();\n      formData.append('image', new Blob([binaryData])); // Wrap binary data in Blob\n      const response = await axios.post(`http://localhost:3001/upload-image/${this.userId}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data', // Set content type as multipart/form-data\n          Authorization: `Bearer ${this.accessToken}` // Include access token if required\n        }\n      });\n      return response.data;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.profile-container {\n  width: 100%;\n  display: flex;\n  overflow: auto;\n  min-height: 100vh;\n  align-items: center;\n  flex-direction: column;\n}\n.profile-main-div {\n  gap: 0;\n  flex: 1;\n  width: 1600px;\n  height: 100%;\n  display: flex;\n  position: relative;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.profile-profile {\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  width: 58%;\n  height: 100%;\n  display: flex;\n  padding: var(--dl-space-space-unit);\n  position: absolute;\n  margin-top: var(--dl-space-space-unit);\n  align-items: flex-start;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: auto;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.profile-container1 {\n  width: 100%;\n  height: 52px;\n  display: flex;\n  align-items: flex-start;\n}\n.profile-text {\n  align-self: center;\n}\n.profile-container2 {\n  flex: 0 0 auto;\n  width: auto;\n  height: auto;\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-start;\n}\n.profile-product-placement {\n  flex: 0 0 auto;\n  width: 100%;\n  height: 40%;\n  display: flex;\n  margin-top: var(--dl-space-space-oneandhalfunits);\n  align-items: center;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n.profile-image {\n  width: 80%;\n  height: 100%;\n  object-fit: cover;\n}\n.profile-container3 {\n  flex: 0 0 auto;\n  width: 100%;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.profile-container4 {\n  flex: 0 0 auto;\n  width: 100%;\n  height: 100px;\n  display: flex;\n  align-items: flex-start;\n}\n.profile-text1 {\n  align-self: center;\n}\n.profile-row1 {\n  flex: 0 0 auto;\n  width: 100%;\n  height: auto;\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-start;\n}\n@media(max-width: 1600px) {\n  .profile-main-div {\n    width: 1600px;\n    height: 100%;\n  }\n  .profile-product-placement {\n    height: 100%;\n    margin: var(--dl-space-space-halfunit);\n    padding: var(--dl-space-space-halfunit);\n    align-items: flex-start;\n    justify-content: flex-start;\n  }\n  .profile-image {\n    width: 684px;\n    height: 355px;\n  }\n  .profile-row1 {\n    height: auto;\n  }\n}\n@media(max-width: 1200px) {\n  .profile-main-div {\n    width: 100%;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}